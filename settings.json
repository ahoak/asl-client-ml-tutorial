{
  "metaTitle": "ASL Fingerspelling Model Tutorial",
  "metaDescription": "Train ASL Fingerspelling ML Model using Tensorflowjs",
  "name": "ASL Fingerspelling Model Tutorial ðŸ‘‹",
  "theme": "",
  "avatarImage": "",
  "social": {
    "glitch": "https://glitch.com/",
    "github": "https://github.com/glitchdotcom",
    "twitter": "https://twitter.com/glitch"
  },
  "showDataVideo": false,
  "trainTutorialSteps": [
    {
      "step": 1,
      "description": "Load Data",
      "helperText": "Load preprocessed data by pressing the button"
    },
    {
      "step": 2,
      "description": "Set TF Backend",
      "helperText": "edit function `setTensorFlowBackend()` (line 45) so that we set tensorflow backend to use webGL (or WASM or CPU)."
    },
    {
      "step": 3,
      "description": "Encode and Split Data",
      "helperText": " use pre-built functions to encode data using one-hot encoder and then split data into training and test set."
    },
    {
      "step": 4,
      "description": "Create Model",
      "helperText": "creating a feed-forward model. We will use 5 layers with relu activation function. Function must return the model."
    },
    {
      "step": 5,
      "description": "Configure Model",
      "helperText": "edit function configureModel() (line 126) by using the Tf.compile API. We will use an adam optimizer, and add correct loss function."
    },
    {
      "step": 6,
      "description": "Train Model",
      "helperText": " edit function trainModel() (line 156) by using the Tf.fit API. Set the following parameters: epochs, batchSize,validationData, callbacks. Hint, you may need to transform your data into tensors "
    },
      {
      "step": 7,
      "description": "Download model files",
      "helperText": "Click the button to download your shiney new model. We will use this in our webapp."
    }
  ],
  "predictSteps": [{
    "step": 1,
    "description": "Import Model",
    "helperText": "Import a pre-trained model to perform inference with."
  }, {
    "step": 2,
    "description": "Extract and Process Joint Positions",
    "helperText": "Extract the hand joint positions from within an image."
  }, {
    "step": 3,
    "description": "Classify",
    "helperText": "Run inference with the normalized joint positions to get a classification (ASL sign)."
  }, {
    "step": 4,
    "description": "Cleanup",
    "helperText": "Cleanup the tensors used while infering."
  }, {
    "step": 5,
    "description": "Run",
    "helperText": "Run prediction on the model"
  }]
}